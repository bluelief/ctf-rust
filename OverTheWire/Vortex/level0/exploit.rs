use std::io::{Read,Write};
use std::net::TcpStream;

fn main(){
    let mut stream = TcpStream::connect("vortex.labs.overthewire.org:5842").unwrap();
    let mut buffer;
    let mut result: u64 = 0;
    let _stream_bytes = 0;

    // fn read(&mut self, buf: &mut [u8]) -> Result<usize>
    // pub const fn from_le_bytes(bytes: [u8; 4]) -> u32
    let mut i = 0;
    while i < 4 {
        buffer = [0u8; 4];
        let stream_bytes = stream.read(&mut buffer);
        match stream_bytes {
            Ok(n) => println!("Receive {} bytes: {:?}", n, u32::from_le_bytes(buffer)),
            _ => {},
        }
        result += u32::from_le_bytes(buffer) as u64;
        i += 1;
    }

    println!("{:?}", result);
    println!("{:?}", ((result & 0xFFFFFFFF)).to_le_bytes());

    stream.write(&mut ((result & 0xFFFFFFFF)).to_le_bytes()).expect("[X] Failed to send...");

    let mut flag = [0u8; 64];
    stream.read(&mut flag).expect("[X] Can not receive...");
    println!("{}", std::str::from_utf8(&flag).unwrap());
}
